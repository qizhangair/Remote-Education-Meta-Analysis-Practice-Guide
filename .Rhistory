g_unadjmn_post = calculate_g_posttest(
data = filtered_data_unadjprepost,
yi_col = "in_pos_un_mn",
yc_col = "co_pos_un_mn",
SDi_col = "in_pos_sd",
SDc_col = "co_pos_sd",
ni_col = "int_pos_ss",
nc_col = "co_pos_ss"
)
)
# Calculate g_unadjmn_pre
filtered_data_unadjprepost <- filtered_data_unadjprepost %>%
mutate(
g_unadjmn_pre = calculate_g_posttest(
data = filtered_data_unadjprepost,
yi_col = "in_pre_un_mn",
yc_col = "co_pre_un_mn",
SDi_col = "in_pre_sd",
SDc_col = "co_pre_sd",
ni_col = "int_pre_ss",
nc_col = "co_pre_ss"
)
)
# Calculate g_dnd
filtered_data_unadjprepost <- filtered_data_unadjprepost %>%
mutate(
g_dnd = g_unadjmn_post - g_unadjmn_pre
)
# Calculate N and M
filtered_data_unadjprepost <- filtered_data_unadjprepost %>%
mutate(
N = int_pos_ss + co_pos_ss,  # Total individuals
M = cl_sam_siz_anly_t + cl_sam_siz_anly_c  # Total clusters
)
# Calculate SE[g_dnd]
filtered_data_unadjprepost <- filtered_data_unadjprepost %>%
mutate(
se_g_dnd = ifelse(
level_assign %in% c("Teachers/Classrooms", "Schools/Centers"),
mapply(calculate_se_g_clustered,
ni = int_pos_ss,
nc = co_pos_ss,
g = g_dnd,
N = N,
M = M),
mapply(calculate_se_g,
ni = int_pos_ss,
nc = co_pos_ss,
g = g_dnd)
)
)
# Filter data for relevant `es_selection` for effect size calculations
filtered_data_adjpost <- filtered_data %>%
filter(es_selection == "SMD: Posttest only, Adjusted Means")
# Ensure all relevant columns are numeric
filtered_data_adjpost <- filtered_data_adjpost %>%
mutate(across(
c(int_pos_ss, co_pos_ss, in_pos_sd, co_pos_sd, in_pos_ad_mn, co_pos_ad_mn),
as.numeric
))
# Calculate g_adjmn_post
filtered_data_adjpost <- filtered_data_adjpost %>%
mutate(
g_adjmn_post = calculate_g_posttest(
data = filtered_data_adjpost,
yi_col = "in_pos_ad_mn",  # Adjusted means for intervention group
yc_col = "co_pos_ad_mn",  # Adjusted means for control group
SDi_col = "in_pos_sd",  # Standard deviation for intervention group
SDc_col = "co_pos_sd",  # Standard deviation for control group
ni_col = "int_pos_ss",  # Sample size for intervention group
nc_col = "co_pos_ss"   # Sample size for control group
)
)
# Calculate N and M for total individuals and clusters
filtered_data_adjpost <- filtered_data_adjpost %>%
mutate(
N = int_pos_ss + co_pos_ss,  # Total individuals
M = cl_sam_siz_anly_t + cl_sam_siz_anly_c  # Total clusters
)
# Calculate SE[g_adjmn_post]
filtered_data_adjpost <- filtered_data_adjpost %>%
mutate(
se_g_adjmn_post = ifelse(
level_assign %in% c("Teachers/Classrooms", "Schools/Centers"),
mapply(calculate_se_g_clustered,
ni = int_pos_ss,
nc = co_pos_ss,
g = g_adjmn_post,
N = N,
M = M),
mapply(calculate_se_g,
ni = int_pos_ss,
nc = co_pos_ss,
g = g_adjmn_post)
)
)
# Filter data for relevant `es_selection` for effect size calculations
filtered_data_unadjpostonly <- filtered_data %>%
filter(es_selection == "SMD: Posttest only, Unadjusted Means")
# Ensure all relevant columns are numeric
filtered_data_unadjpostonly <- filtered_data_unadjpostonly %>%
mutate(across(
c(int_pos_ss, co_pos_ss, in_pos_sd, co_pos_sd, in_pos_un_mn, co_pos_un_mn),
as.numeric
))
# Calculate g_unadjmn_postonly
filtered_data_unadjpostonly <- filtered_data_unadjpostonly %>%
mutate(
g_unadjmn_postonly = calculate_g_posttest(
data = filtered_data_unadjpostonly,
yi_col = "in_pos_un_mn",  # Unadjusted means for intervention group
yc_col = "co_pos_un_mn",  # Unadjusted means for control group
SDi_col = "in_pos_sd",  # Standard deviation for intervention group
SDc_col = "co_pos_sd",  # Standard deviation for control group
ni_col = "int_pos_ss",  # Sample size for intervention group
nc_col = "co_pos_ss"   # Sample size for control group
)
)
# Calculate N and M for total individuals and clusters
filtered_data_unadjpostonly <- filtered_data_unadjpostonly %>%
mutate(
N = int_pos_ss + co_pos_ss,  # Total individuals
M = cl_sam_siz_anly_t + cl_sam_siz_anly_c  # Total clusters
)
# Calculate SE[g_unadjmn_postonly]
filtered_data_unadjpostonly <- filtered_data_unadjpostonly %>%
mutate(
se_g_unadjmn_postonly = ifelse(
level_assign %in% c("Teachers/Classrooms", "Schools/Centers"),
mapply(calculate_se_g_clustered,
ni = int_pos_ss,
nc = co_pos_ss,
g = g_unadjmn_postonly,
N = N,
M = M),
mapply(calculate_se_g,
ni = int_pos_ss,
nc = co_pos_ss,
g = g_unadjmn_postonly)
)
)
# Filter for adjusted linear regression effect sizes
filtered_data_adjreg <- filtered_data %>%
filter(es_selection == "SMD: Posttest, Adjusted Linear Regression Coefficient")
# Ensure relevant columns are numeric
filtered_data_adjreg <- filtered_data_adjreg %>%
mutate(across(
c(int_pos_ss, co_pos_ss, in_pos_sd, co_pos_sd, ov_pos_ad_ln_reg, ov_pos_reg_se),
~ suppressWarnings(as.numeric(trimws(as.character(.))))
))
# Compute g_adjreg_post row-wise
filtered_data_adjreg <- filtered_data_adjreg %>%
mutate(
g_adjreg_post = calculate_g_adjreg(
data = filtered_data_adjreg,
b_col = "ov_pos_ad_ln_reg",  # Column name, not values
SDi_col = "in_pos_sd",
SDc_col = "co_pos_sd",
ni_col = "int_pos_ss",
nc_col = "co_pos_ss"
)
)
# Compute ES and SE for adjusted regression, both individual and cluster-level assignments
filtered_data_adjreg <- filtered_data_adjreg %>%
mutate(
N = int_pos_ss + co_pos_ss,  # Total individuals
M = cl_sam_siz_anly_t + cl_sam_siz_anly_c  # Total clusters
) %>%
mutate(
se_g_adjreg_post = ifelse(
level_assign %in% c("Teachers/Classrooms", "Schools/Centers"),
# Apply clustered calculation
mapply(calculate_se_g_adjreg_cluster,
ni = int_pos_ss,
nc = co_pos_ss,
g = g_adjreg_post,
SE_b = ov_pos_reg_se,
SDi = in_pos_sd,
SDc = co_pos_sd,
N = N,
M = M
),
# Apply non-clustered calculation
mapply(calculate_se_g_adjreg,
ni = int_pos_ss,
nc = co_pos_ss,
g = g_adjreg_post,
SE_b = ov_pos_reg_se,
SDi = in_pos_sd,
SDc = co_pos_sd
)
)
)
# Filter for unadjusted linear regression effect sizes
filtered_data_unadjreg <- filtered_data %>%
filter(es_selection == "SMD: Posttest only, Linear Regression Coefficient")
# Ensure relevant columns are numeric
filtered_data_unadjreg <- filtered_data_unadjreg %>%
mutate(across(
c(int_pos_ss, co_pos_ss, in_pos_sd, co_pos_sd, ov_pos_un_ln_reg, ov_pos_reg_se),
~ suppressWarnings(as.numeric(trimws(as.character(.))))
))
# Compute g_unadjreg_post using the correct column name references
filtered_data_unadjreg <- filtered_data_unadjreg %>%
mutate(
g_unadjreg_post = calculate_g_adjreg(
data = filtered_data_unadjreg,
b_col = "ov_pos_un_ln_reg",  # Column name, not values
SDi_col = "in_pos_sd",
SDc_col = "co_pos_sd",
ni_col = "int_pos_ss",
nc_col = "co_pos_ss"
)
)
# Compute ES and SE for unadjusted regression, both individual and cluster-level assignments
filtered_data_unadjreg <- filtered_data_unadjreg %>%
mutate(
N = int_pos_ss + co_pos_ss,  # Total individuals
M = cl_sam_siz_anly_t + cl_sam_siz_anly_c  # Total clusters
) %>%
mutate(
se_g_unadjreg_post = ifelse(
level_assign %in% c("Teachers/Classrooms", "Schools/Centers"),
# Apply clustered calculation
mapply(calculate_se_g_adjreg_cluster,
ni = int_pos_ss,
nc = co_pos_ss,
g = g_unadjreg_post,
SE_b = ov_pos_reg_se,
SDi = in_pos_sd,
SDc = co_pos_sd,
N = N,
M = M
),
# Apply non-clustered calculation
mapply(calculate_se_g_adjreg,
ni = int_pos_ss,
nc = co_pos_ss,
g = g_unadjreg_post,
SE_b = ov_pos_reg_se,
SDi = in_pos_sd,
SDc = co_pos_sd
)
)
)
# Filter data for relevant `es_selection` for effect size calculations
filtered_data_tstat <- filtered_data %>%
filter(es_selection == "SMD: Posttest only, T Statistic")
# Ensure all relevant columns are numeric
filtered_data_tstat <- filtered_data_tstat %>%
mutate(across(
c(int_pos_ss, co_pos_ss, ov_pos_t, cl_sam_siz_anly_t, cl_sam_siz_anly_c),
as.numeric
))
# Compute N and M
filtered_data_tstat <- filtered_data_tstat %>%
mutate(
N = int_pos_ss + co_pos_ss,  # Total individuals
M = cl_sam_siz_anly_t + cl_sam_siz_anly_c  # Total clusters
)
# Compute g_tstat_post for both cluster and non-cluster designs while skipping missing values
filtered_data_tstat <- filtered_data_tstat %>%
rowwise() %>%
mutate(
g_tstat_post = case_when(
!is.na(M) & !is.na(N) & level_assign %in% c("Teachers/Classrooms", "Schools/Centers") ~
calculate_g_tstat_cluster(
data = pick(int_pos_ss, co_pos_ss, ov_pos_t, N, M),  # Use `pick()` instead of `cur_data()`
t_uc_col = "ov_pos_t",
ni_col = "int_pos_ss",
nc_col = "co_pos_ss",
N_col = "N",
M_col = "M"
),
!level_assign %in% c("Teachers/Classrooms", "Schools/Centers") ~
calculate_g_tstat(
data = pick(int_pos_ss, co_pos_ss, ov_pos_t, N, M),
t_col = "ov_pos_t",
ni_col = "int_pos_ss",
nc_col = "co_pos_ss"
),
TRUE ~ NA_real_
)
) %>%
ungroup()  # Ungroup after row-wise computation
filtered_data_tstat <- filtered_data_tstat %>%
mutate(
se_g_tstat_post = ifelse(
level_assign %in% c("Teachers/Classrooms", "Schools/Centers"),
mapply(calculate_se_g_clustered,
ni = int_pos_ss,
nc = co_pos_ss,
g = g_tstat_post,
N = N,
M = M),
mapply(calculate_se_g,
ni = int_pos_ss,
nc = co_pos_ss,
g = g_tstat_post)
)
)
### ES and SE for ANOVA F Stat ###
# Filter data for relevant `es_selection` for effect size calculations
filtered_data_fstat <- filtered_data %>%
filter(es_selection == "SMD: Posttest only, F Statistic")
# Ensure all relevant columns are numeric
filtered_data_fstat <- filtered_data_fstat %>%
mutate(across(
c(int_pos_ss, co_pos_ss, ov_pos_un_f, cl_sam_siz_anly_t, cl_sam_siz_anly_c),
as.numeric
))
# Compute g
filtered_data_fstat <- filtered_data_fstat %>%
mutate(
N = int_pos_ss + co_pos_ss,  # Total individuals
M = cl_sam_siz_anly_t + cl_sam_siz_anly_c  # Total clusters
) %>%
mutate(
g_fstat_post = ifelse(
level_assign %in% c("Teachers/Classrooms", "Schools/Centers"),
mapply(calculate_g_fstat_cluster,
data = list(filtered_data_fstat),
F_col = "ov_pos_un_f",
ni_col = "int_pos_ss",
nc_col = "co_pos_ss",
N_col = "N",
M_col = "M"),
mapply(calculate_g_fstat,
data = list(filtered_data_fstat),
F_col = "ov_pos_un_f",
ni_col = "int_pos_ss",
nc_col = "co_pos_ss")
)
)
# Compute SE[g]
filtered_data_fstat <- filtered_data_fstat %>%
mutate(
se_g_fstat_post = ifelse(
level_assign %in% c("Teachers/Classrooms", "Schools/Centers"),
mapply(calculate_se_g_clustered,
ni = int_pos_ss,
nc = co_pos_ss,
g = g_fstat_post,
N = N,
M = M),
mapply(calculate_se_g,
ni = int_pos_ss,
nc = co_pos_ss,
g = g_fstat_post)
)
)
# Filter data for relevant `es_selection` for effect size calculations
filtered_data_or <- filtered_data %>%
filter(es_selection == "OR: Posttest only, Proportions")
# Ensure all relevant columns are numeric
filtered_data_or <- filtered_data_or %>%
mutate(across(
c(int_pos_ss, co_pos_ss, cl_sam_siz_anly_t, cl_sam_siz_anly_c, in_pos_pr_ys, co_pos_pr_ys),
as.numeric
))
# Compute g for Odds Ratio
filtered_data_or <- filtered_data_or %>%
mutate(
N = int_pos_ss + co_pos_ss,  # Total individuals
M = cl_sam_siz_anly_t + cl_sam_siz_anly_c  # Total clusters
) %>%
mutate(
g_or_post = ifelse(
level_assign %in% c("Teachers/Classrooms", "Schools/Centers"),
mapply(calculate_g_odds_ratio,
p_i = in_pos_pr_ys,
p_c = co_pos_pr_ys),
mapply(calculate_g_odds_ratio,
p_i = in_pos_pr_ys,
p_c = co_pos_pr_ys)
)
)
# Compute SE[g] for Odds Ratio
filtered_data_or <- filtered_data_or %>%
mutate(
se_g_or_post = ifelse(
level_assign %in% c("Teachers/Classrooms", "Schools/Centers"),
mapply(calculate_se_g_odds_cluster,
p_i = in_pos_pr_ys,
p_c = co_pos_pr_ys,
ni = int_pos_ss,
nc = co_pos_ss,
N = N,
M = M),
mapply(calculate_se_g,
ni = int_pos_ss,
nc = co_pos_ss,
g = g_or_post)
)
)
# Combine effect sizes
effect_sizes <- bind_rows(
filtered_data_unadjprepost %>%
select(
pseudo_effect_size_id,
g_unadjmn_post,
g_unadjmn_pre,
g_dnd,
se_g_dnd
),
filtered_data_unadjpostonly %>%  # NEW: Including posttest-only unadjusted means
select(
pseudo_effect_size_id,
g_unadjmn_postonly,
se_g_unadjmn_postonly
),
filtered_data_adjpost %>%
select(
pseudo_effect_size_id,
g_adjmn_post,
se_g_adjmn_post
),
filtered_data_adjreg %>%
select(
pseudo_effect_size_id,
g_adjreg_post,
se_g_adjreg_post
),
filtered_data_unadjreg %>%  # NEW: Including unadjusted regression effect sizes
select(
pseudo_effect_size_id,
g_unadjreg_post,
se_g_unadjreg_post
),
filtered_data_tstat %>%
select(
pseudo_effect_size_id,
g_tstat_post,
se_g_tstat_post
),
filtered_data_fstat %>%
select(
pseudo_effect_size_id,
g_fstat_post,
se_g_fstat_post
),
filtered_data_or %>%  # Including OR-based effect sizes
select(
pseudo_effect_size_id,
g_or_post,
se_g_or_post
)
)
# Generate g_calculated, se_calculated, and effect_size_type
effect_sizes <- effect_sizes %>%
mutate(
g_calculated = coalesce(
g_dnd,
g_unadjmn_postonly,
g_adjmn_post,
g_adjreg_post,
g_unadjreg_post,  # NEW: Include unadjusted regression g
g_tstat_post,
g_fstat_post,
g_or_post,
NA_real_  # Ensures g_calculated remains numeric even if all are NA
),
se_calculated = coalesce(
se_g_dnd,
se_g_unadjmn_postonly,
se_g_adjmn_post,
se_g_adjreg_post,
se_g_unadjreg_post,  # NEW: Include unadjusted regression SE
se_g_tstat_post,
se_g_fstat_post,
se_g_or_post,
NA_real_  # Keeps numeric type if all are NA
),
effect_size_type = case_when(
!is.na(g_dnd) ~ "DND",
!is.na(g_unadjmn_postonly) ~ "Unadjusted Posttest Mean",
!is.na(g_adjmn_post) ~ "Adjusted Posttest Mean",
!is.na(g_adjreg_post) ~ "Adjusted Regression",
!is.na(g_unadjreg_post) ~ "Unadjusted Regression",  # NEW: Label for unadjusted regression
!is.na(g_tstat_post) ~ "T-Statistic",
!is.na(g_fstat_post) ~ "F-Statistic",
!is.na(g_or_post) ~ "Odds Ratio",
TRUE ~ "No Effect Size Available"  # Ensures a value is always present
)
)
# Merge the effect sizes back into the original filtered_data
filtered_data <- merge(
filtered_data,
effect_sizes,
by = "pseudo_effect_size_id",
all.x = TRUE
)
# Ensure relevant columns are numeric
filtered_data <- filtered_data %>%
mutate(across(
c(int_pos_ss, co_pos_ss, cl_sam_siz_anly_t, cl_sam_siz_anly_c),
~ suppressWarnings(as.numeric(.))
))
# Merge the effect sizes back into the original filtered_data
filtered_data <- merge(
filtered_data,
effect_sizes,
by = "pseudo_effect_size_id",
all.x = TRUE
)
# Merge the effect sizes back into the original filtered_data
filtered_data <- merge(
filtered_data,
effect_sizes,
by = "pseudo_effect_size_id",
all.x = TRUE
)
