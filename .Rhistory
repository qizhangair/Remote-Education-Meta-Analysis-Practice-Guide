mapply(calculate_se_g_clustered,
ni = int_pos_ss,
nc = co_pos_ss,
g = g_unadjmn_postonly,
N = N,
M = M),
mapply(calculate_se_g,
ni = int_pos_ss,
nc = co_pos_ss,
g = g_unadjmn_postonly)
)
)
### ES and SE for Adjusted Regression, Post Only ###
# Filter for adjusted linear regression effect sizes
filtered_data_adjreg <- filtered_data %>%
filter(es_selection == "SMD: Posttest, Adjusted Linear Regression Coefficient")
# Ensure relevant columns are numeric
filtered_data_adjreg <- filtered_data_adjreg %>%
mutate(across(
c(int_pos_ss, co_pos_ss, in_pos_sd, co_pos_sd, ov_pos_ad_ln_reg, ov_pos_reg_se),
~ suppressWarnings(as.numeric(trimws(as.character(.))))
))
# Compute g_adjreg_post row-wise
filtered_data_adjreg <- filtered_data_adjreg %>%
mutate(
g_adjreg_post = calculate_g_adjreg(
data = filtered_data_adjreg,
b_col = "ov_pos_ad_ln_reg",  # Column name, not values
SDi_col = "in_pos_sd",
SDc_col = "co_pos_sd",
ni_col = "int_pos_ss",
nc_col = "co_pos_ss"
)
)
# Compute ES and SE for adjusted regression, both individual and cluster-level assignments
filtered_data_adjreg <- filtered_data_adjreg %>%
mutate(
N = int_pos_ss + co_pos_ss,  # Total individuals
M = cl_sam_siz_anly_t + cl_sam_siz_anly_c  # Total clusters
) %>%
mutate(
se_g_adjreg_post = ifelse(
level_assign %in% c("Teachers/Classrooms", "Schools/Centers"),
# Apply clustered calculation
mapply(calculate_se_g_adjreg_cluster,
ni = int_pos_ss,
nc = co_pos_ss,
g = g_adjreg_post,
SE_b = ov_pos_reg_se,
SDi = in_pos_sd,
SDc = co_pos_sd,
N = N,
M = M
),
# Apply non-clustered calculation
mapply(calculate_se_g_adjreg,
ni = int_pos_ss,
nc = co_pos_ss,
g = g_adjreg_post,
SE_b = ov_pos_reg_se,
SDi = in_pos_sd,
SDc = co_pos_sd
)
)
)
### ES and SE for unadjusted regression, post only ###
# Filter for unadjusted linear regression effect sizes
filtered_data_unadjreg <- filtered_data %>%
filter(es_selection == "SMD: Posttest only, Linear Regression Coefficient")
# Ensure relevant columns are numeric
filtered_data_unadjreg <- filtered_data_unadjreg %>%
mutate(across(
c(int_pos_ss, co_pos_ss, in_pos_sd, co_pos_sd, ov_pos_un_ln_reg, ov_pos_reg_se),
~ suppressWarnings(as.numeric(trimws(as.character(.))))
))
# Compute g_unadjreg_post using the correct column name references
filtered_data_unadjreg <- filtered_data_unadjreg %>%
mutate(
g_unadjreg_post = calculate_g_adjreg(
data = filtered_data_unadjreg,
b_col = "ov_pos_un_ln_reg",  # Column name, not values
SDi_col = "in_pos_sd",
SDc_col = "co_pos_sd",
ni_col = "int_pos_ss",
nc_col = "co_pos_ss"
)
)
# Compute ES and SE for unadjusted regression, both individual and cluster-level assignments
filtered_data_unadjreg <- filtered_data_unadjreg %>%
mutate(
N = int_pos_ss + co_pos_ss,  # Total individuals
M = cl_sam_siz_anly_t + cl_sam_siz_anly_c  # Total clusters
) %>%
mutate(
se_g_unadjreg_post = ifelse(
level_assign %in% c("Teachers/Classrooms", "Schools/Centers"),
# Apply clustered calculation
mapply(calculate_se_g_adjreg_cluster,
ni = int_pos_ss,
nc = co_pos_ss,
g = g_unadjreg_post,
SE_b = ov_pos_reg_se,
SDi = in_pos_sd,
SDc = co_pos_sd,
N = N,
M = M
),
# Apply non-clustered calculation
mapply(calculate_se_g_adjreg,
ni = int_pos_ss,
nc = co_pos_ss,
g = g_unadjreg_post,
SE_b = ov_pos_reg_se,
SDi = in_pos_sd,
SDc = co_pos_sd
)
)
)
### ES and SE for t stat ###
# Filter data for relevant `es_selection` for effect size calculations
filtered_data_tstat <- filtered_data %>%
filter(es_selection == "SMD: Posttest only, T Statistic")
# Ensure all relevant columns are numeric
filtered_data_tstat <- filtered_data_tstat %>%
mutate(across(
c(int_pos_ss, co_pos_ss, ov_pos_t, cl_sam_siz_anly_t, cl_sam_siz_anly_c),
as.numeric
))
# Compute N and M
filtered_data_tstat <- filtered_data_tstat %>%
mutate(
N = int_pos_ss + co_pos_ss,  # Total individuals
M = cl_sam_siz_anly_t + cl_sam_siz_anly_c  # Total clusters
)
# Compute g_tstat_post for both cluster and non-cluster designs while skipping missing values
filtered_data_tstat <- filtered_data_tstat %>%
rowwise() %>%
mutate(
g_tstat_post = case_when(
!is.na(M) & !is.na(N) & level_assign %in% c("Teachers/Classrooms", "Schools/Centers") ~
calculate_g_tstat_cluster(
data = pick(int_pos_ss, co_pos_ss, ov_pos_t, N, M),  # Use `pick()` instead of `cur_data()`
t_uc_col = "ov_pos_t",
ni_col = "int_pos_ss",
nc_col = "co_pos_ss",
N_col = "N",
M_col = "M"
),
!level_assign %in% c("Teachers/Classrooms", "Schools/Centers") ~
calculate_g_tstat(
data = pick(int_pos_ss, co_pos_ss, ov_pos_t, N, M),
t_col = "ov_pos_t",
ni_col = "int_pos_ss",
nc_col = "co_pos_ss"
),
TRUE ~ NA_real_
)
) %>%
ungroup()  # Ungroup after row-wise computation
filtered_data_tstat <- filtered_data_tstat %>%
mutate(
se_g_tstat_post = ifelse(
level_assign %in% c("Teachers/Classrooms", "Schools/Centers"),
mapply(calculate_se_g_clustered,
ni = int_pos_ss,
nc = co_pos_ss,
g = g_tstat_post,
N = N,
M = M),
mapply(calculate_se_g,
ni = int_pos_ss,
nc = co_pos_ss,
g = g_tstat_post)
)
)
### ES and SE for ANOVA F Stat ###
# Filter data for relevant `es_selection` for effect size calculations
filtered_data_fstat <- filtered_data %>%
filter(es_selection == "SMD: Posttest only, F Statistic")
# Ensure all relevant columns are numeric
filtered_data_fstat <- filtered_data_fstat %>%
mutate(across(
c(int_pos_ss, co_pos_ss, ov_pos_un_f, cl_sam_siz_anly_t, cl_sam_siz_anly_c),
as.numeric
))
# Compute g
filtered_data_fstat <- filtered_data_fstat %>%
mutate(
N = int_pos_ss + co_pos_ss,  # Total individuals
M = cl_sam_siz_anly_t + cl_sam_siz_anly_c  # Total clusters
) %>%
mutate(
g_fstat_post = ifelse(
level_assign %in% c("Teachers/Classrooms", "Schools/Centers"),
mapply(calculate_g_fstat_cluster,
data = list(filtered_data_fstat),
F_col = "ov_pos_un_f",
ni_col = "int_pos_ss",
nc_col = "co_pos_ss",
N_col = "N",
M_col = "M"),
mapply(calculate_g_fstat,
data = list(filtered_data_fstat),
F_col = "ov_pos_un_f",
ni_col = "int_pos_ss",
nc_col = "co_pos_ss")
)
)
# Compute SE[g]
filtered_data_fstat <- filtered_data_fstat %>%
mutate(
se_g_fstat_post = ifelse(
level_assign %in% c("Teachers/Classrooms", "Schools/Centers"),
mapply(calculate_se_g_clustered,
ni = int_pos_ss,
nc = co_pos_ss,
g = g_fstat_post,
N = N,
M = M),
mapply(calculate_se_g,
ni = int_pos_ss,
nc = co_pos_ss,
g = g_fstat_post)
)
)
### ES and SE for Odd Ratios ###
# Filter data for relevant `es_selection` for effect size calculations
filtered_data_or <- filtered_data %>%
filter(es_selection == "OR: Posttest only, Proportions")
# Ensure all relevant columns are numeric
filtered_data_or <- filtered_data_or %>%
mutate(across(
c(int_pos_ss, co_pos_ss, cl_sam_siz_anly_t, cl_sam_siz_anly_c, in_pos_pr_ys, co_pos_pr_ys),
as.numeric
))
# Compute g for Odds Ratio
filtered_data_or <- filtered_data_or %>%
mutate(
N = int_pos_ss + co_pos_ss,  # Total individuals
M = cl_sam_siz_anly_t + cl_sam_siz_anly_c  # Total clusters
) %>%
mutate(
g_or_post = ifelse(
level_assign %in% c("Teachers/Classrooms", "Schools/Centers"),
mapply(calculate_g_odds_ratio,
p_i = in_pos_pr_ys,
p_c = co_pos_pr_ys),
mapply(calculate_g_odds_ratio,
p_i = in_pos_pr_ys,
p_c = co_pos_pr_ys)
)
)
# Compute SE[g] for Odds Ratio
filtered_data_or <- filtered_data_or %>%
mutate(
se_g_or_post = ifelse(
level_assign %in% c("Teachers/Classrooms", "Schools/Centers"),
mapply(calculate_se_g_odds_cluster,
p_i = in_pos_pr_ys,
p_c = co_pos_pr_ys,
ni = int_pos_ss,
nc = co_pos_ss,
N = N,
M = M),
mapply(calculate_se_g,
ni = int_pos_ss,
nc = co_pos_ss,
g = g_or_post)
)
)
# Combine effect sizes
effect_sizes <- bind_rows(
filtered_data_unadjprepost %>%
select(
pseudo_effect_size_id,
g_unadjmn_post,
g_unadjmn_pre,
g_dnd,
se_g_dnd
),
filtered_data_unadjpostonly %>%  # NEW: Including posttest-only unadjusted means
select(
pseudo_effect_size_id,
g_unadjmn_postonly,
se_g_unadjmn_postonly
),
filtered_data_adjpost %>%
select(
pseudo_effect_size_id,
g_adjmn_post,
se_g_adjmn_post
),
filtered_data_adjreg %>%
select(
pseudo_effect_size_id,
g_adjreg_post,
se_g_adjreg_post
),
filtered_data_unadjreg %>%  # NEW: Including unadjusted regression effect sizes
select(
pseudo_effect_size_id,
g_unadjreg_post,
se_g_unadjreg_post
),
filtered_data_tstat %>%
select(
pseudo_effect_size_id,
g_tstat_post,
se_g_tstat_post
),
filtered_data_fstat %>%
select(
pseudo_effect_size_id,
g_fstat_post,
se_g_fstat_post
),
filtered_data_or %>%  # Including OR-based effect sizes
select(
pseudo_effect_size_id,
g_or_post,
se_g_or_post
)
)
# Generate g_calculated, se_calculated, and effect_size_type
effect_sizes <- effect_sizes %>%
mutate(
g_calculated = coalesce(
g_dnd,
g_unadjmn_postonly,
g_adjmn_post,
g_adjreg_post,
g_unadjreg_post,  # NEW: Include unadjusted regression g
g_tstat_post,
g_fstat_post,
g_or_post,
NA_real_  # Ensures g_calculated remains numeric even if all are NA
),
se_calculated = coalesce(
se_g_dnd,
se_g_unadjmn_postonly,
se_g_adjmn_post,
se_g_adjreg_post,
se_g_unadjreg_post,  # NEW: Include unadjusted regression SE
se_g_tstat_post,
se_g_fstat_post,
se_g_or_post,
NA_real_  # Keeps numeric type if all are NA
),
effect_size_type = case_when(
!is.na(g_dnd) ~ "DND",
!is.na(g_unadjmn_postonly) ~ "Unadjusted Posttest Mean",
!is.na(g_adjmn_post) ~ "Adjusted Posttest Mean",
!is.na(g_adjreg_post) ~ "Adjusted Regression",
!is.na(g_unadjreg_post) ~ "Unadjusted Regression",  # NEW: Label for unadjusted regression
!is.na(g_tstat_post) ~ "T-Statistic",
!is.na(g_fstat_post) ~ "F-Statistic",
!is.na(g_or_post) ~ "Odds Ratio",
TRUE ~ "No Effect Size Available"  # Ensures a value is always present
)
)
# Merge the effect sizes back into the original filtered_data
filtered_data <- merge(
filtered_data,
effect_sizes,
by = "pseudo_effect_size_id",
all.x = TRUE
)
# Ensure relevant columns are numeric
filtered_data <- filtered_data %>%
mutate(across(
c(int_pos_ss, co_pos_ss, cl_sam_siz_anly_t, cl_sam_siz_anly_c),
~ suppressWarnings(as.numeric(.))
))
# Initialize N (total individuals) and M (total clusters)
filtered_data <- filtered_data %>%
mutate(
N = int_pos_ss + co_pos_ss,  # Total individuals
M = cl_sam_siz_anly_t + cl_sam_siz_anly_c  # Total clusters
)
# Replace g_calculated with es_rpt for specific study IDs
filtered_data <- filtered_data %>%
mutate(
g_calculated = case_when(
study_id %in% c(36833931, 36834226) ~ es_rpt,  # Always replace for these
study_id == 36439148 & es_selection == "SMD: Posttest, Adjusted Linear Regression Coefficient" ~ es_rpt,  # Conditional replacement
TRUE ~ g_calculated  # Keep original value for all others
)
)
# Update se_calculated: use se_rpt for study 36834226, recalculate for others
filtered_data <- filtered_data %>%
mutate(
se_calculated = case_when(
study_id == 36834226 ~ se_rpt,  # Use reported SE for this study
study_id == 36833931 ~ ifelse(
level_assign %in% c("Teachers/Classrooms", "Schools/Centers"),
mapply(calculate_se_g_clustered, ni = int_pos_ss, nc = co_pos_ss, g = g_calculated, N = N, M = M),
mapply(calculate_se_g, ni = int_pos_ss, nc = co_pos_ss, g = g_calculated)
),
study_id == 36439148 & es_selection == "SMD: Posttest, Adjusted Linear Regression Coefficient" ~ ifelse(
level_assign %in% c("Teachers/Classrooms", "Schools/Centers"),
mapply(calculate_se_g_clustered, ni = int_pos_ss, nc = co_pos_ss, g = g_calculated, N = N, M = M),
mapply(calculate_se_g, ni = int_pos_ss, nc = co_pos_ss, g = g_calculated)
),
TRUE ~ se_calculated  # Keep original value for all others
)
)
# Update effect_size_type only for the three specified studies, leaving others unchanged
filtered_data <- filtered_data %>%
mutate(
effect_size_type = case_when(
study_id %in% c(36833931, 36834226) ~ "Study Reported",
study_id == 36439148 & es_selection == "SMD: Posttest, Adjusted Linear Regression Coefficient" ~ "Study Reported",
TRUE ~ effect_size_type  # Retain original values for other studies
)
)
# Summarize effect_size_type by count (N)
effect_size_summary <- filtered_data %>%
group_by(effect_size_type) %>%
summarise(N = n(), .groups = "drop")  # Count number of rows per effect_size_type
print(effect_size_summary)
# Compute var_calculated as the square of se_calculated
filtered_data <- filtered_data %>%
mutate(var_calculated = ifelse(!is.na(se_calculated), se_calculated^2, NA_real_))
# Save the filtered dataset
write.csv(filtered_data, "C:/Users/qzhang/OneDrive - AIR/Desktop/Remote Ed Meta/Data Cleaning/Analysis_Dataset.csv", row.names = FALSE)
# Load the helper functions
source("helper_functions.R")
# Load the dataset
data <- read.csv("C:/Users/qzhang/OneDrive - AIR/Desktop/Remote Ed Meta/Data Cleaning/Analysis_Dataset.csv")
# Filter out rows where outcome_math_micro or outcome_sci_micro contains "Academic disposition"
filtered_data <- data %>%
filter(!(grepl("Academic disposition", outcome_math_micro, ignore.case = TRUE) |
grepl("Academic disposition", outcome_sci_micro, ignore.case = TRUE)))
# Methods
block0 <- c("peer_review", "coi", "Teachers", "Schools", "rdm", "math_intervention")
# Intervention characteristics
block1 <- c("condition_duration", "hours_per_week",
"NotWkly", "OnePerWk", "TwoPerWk", "ThreeFourPerWk",
"school_site_school_day", "school_site_after_school", "home")
block1.1 <- c("sync_async_both", "provides_feedback", "adaptive",
"pedagogy_discovery", "pedagogy_collaborative", "pedagogy_direct", "pedagogy_practice",
"instructor_facilitated", "interaction_teacher", "interaction_peers")
# Sample characteristics
block2 <- c("low_ses", "pct_female", "pct_black", "pct_latinx", "pct_asian", "pct_sped",
"pct_ell", "elementary", "middle", "high")
# Setting
block3 <- c("high_income", "upper_middle_income", "urban", "rural")
# Outcomes (administration)
block4 <- c("measure_standardized", "measure_researcher", "measure_teacher",
"oaperiod_direct")
# Outcomes (math only)
block5 <- c("outcome_math_nsense", "outcome_math_algebra", "outcome_math_general",
"outcome_math_geometry", "outcome_math_rnumbers", "outcome_math_measurement")
# Outcomes (science only)
block6 <- c("outcome_sci_biology", "outcome_sci_physical_sciences",
"outcome_sci_other_sciences")
# Define moderator blocks
mods0 <- c()
mods1 <- c(block0)
mods2 <- c(block0, block1)
mods2.1 <- c(block0, block1.1)
mods3 <- c(block0, block2)
mods4 <- c(block0, block3)
mods5 <- c(block0, block4)
mods6 <- c(block0, block5)
mods7 <- c(block0, block6)
cond1 <- list("peer_review", "coi",
c("Teachers", "Schools"), "rdm", "math_intervention")
cond2 <- list(c("NotWkly1", "OnePerWk1", "TwoPerWk1", "ThreeFourPerWk1"),
"school_site_school_day1", "school_site_after_school1", "home1")
cond2.1 <- list("sync_async_both",
c("provides_feedback", "adaptive"),
"pedagogy_discovery", "pedagogy_collaborative", "pedagogy_direct", "pedagogy_practice",
"instructor_facilitated",
c("interaction_teacher", "interaction_peers"))
cond3 <- list("elementary1", "middle1", "high1")
cond4 <- list(c("high_income1", "upper_middle_income1"),
c("urban1", "rural1"))
cond5 <- list("measure_standardized", "measure_researcher", "measure_teacher", "oaperiod_direct")
cond6 <- list("outcome_math_nsense", "outcome_math_algebra",
"outcome_math_general", "outcome_math_geometry", "outcome_math_rnumbers",
"outcome_math_measurement")
cond7 <- list("outcome_sci_biology",
"outcome_sci_physical_sciences", "outcome_sci_other_sciences")
block1.1_2 <- c("sync_async_both", "provides_feedback", "adaptive",
"direct_practice", "direct_practice_collab_disc", "practice_collab_disc", "collab_disc",
"instructor_facilitated", "interaction_teacher", "interaction_peers")
mods2.1_2 <- c(block0, block1.1_2)
res_mods2.1_2 <- rve_model(filtered_data, mods = mods2.1_2, r = 0.5, pred_level = 95, report_model = "full")
summary(res_mods2.1_2$rma_model)
#run models
res_mods0 <- rve_model(filtered_data, mods = mods0, r = 0.5, pred_level = 95, report_model = "full")
summary(res_mods0$rma_model)
res_mods1 <- rve_model(filtered_data, mods = mods1, r = 0.5, pred_level = 95, report_model = "full")
summary(res_mods1$rma_model)
res_mods5 <- rve_model(filtered_data, mods = mods5, r = 0.5, pred_level = 95, report_model = "full")
summary(res_mods5$rma_model)
res_mods6 <- rve_model(filtered_data, mods = mods6, r = 0.5, pred_level = 95, report_model = "full")
summary(res_mods6$rma_model)
res_mods7 <- rve_model(filtered_data, mods = mods7, r = 0.5, pred_level = 95, report_model = "full")
summary(res_mods7$rma_model)
cond2.1_2 <- list("sync_async_both",
c("provides_feedback", "adaptive"),
c("direct_practice", "direct_practice_collab_disc", "practice_collab_disc", "collab_disc"),
"instructor_facilitated",
c("interaction_teacher", "interaction_peers"))
res_mods2.1_2$cond_means <- rve_cond(res_mods2.1_2$rma_model, cond2.1_2, filtered_data)
View(res_mods2.1_1$cond_means)
res_mods2.1_2 <- rve_model(filtered_data, mods = mods2.1_2, r = 0.5, pred_level = 95, report_model = "full")
res_mods2.1_2$cond_means <- rve_cond(res_mods2.1_2$rma_model, cond2.1_2, filtered_data)
View(res_mods2.1_1$cond_means)
View(res_mods2.1_2$cond_means)
